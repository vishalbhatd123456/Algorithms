import java.util.*;

class Program {
  public static List<Integer> rightSmallerThan(List<Integer> array) {
   	if(array.size() == 0){
			return new ArrayList<Integer>();
		}
		int lastIdx = array.size()-1;
		SpecialBST bst = new SpecialBST(array.get(lastIdx),lastIdx, 0);
		for(int i = array.size()-2;i>=0;i--){
			bst.insert(array.get(i),i);
		}
		
		List<Integer> rightSmallerCounts = new ArrayList<Integer>(array);
		getRightSmallerCounts(bst, rightSmallerCounts);
		return rightSmallerCounts;
  }
	
	public static void getRightSmallerCounts(SpecialBST bst, List<Integer> rightSmallerCounts){
		if(bst == null)return;
		rightSmallerCounts.set(bst.idx, bst.numSmallerAtInsetTime);
		getRightSmallerCounts(bst.left,rightSmallerCounts);
		getRightSmallerCounts(bst.right, rightSmallerCounts);
	}
	
	static class SpecialBST{
		public int value;
		public int idx;
		public int numSmallerAtInsetTime;
		public int leftSubtreeSize;
		public SpecialBST left;
		public SpecialBST right;
		
		public SpecialBST(int value, int idx, int numSmallerAtInsetTime){
			this.value = value;
			this.idx = idx;
			this.numSmallerAtInsetTime = numSmallerAtInsetTime;
			leftSubtreeSize = 0;
			left = null;
			right = null;
		}
		public void insert(int value, int idx){
			insertHelper(value, idx, 0);
		}
		
		public void insertHelper(int value, int idx, int numSmallerAtInsetTime){
			if(value < this.value){
				leftSubtreeSize++;
				if(left == null){
					left = new SpecialBST(value, idx, numSmallerAtInsetTime);
				}
				else{
					left.insertHelper(value,idx,numSmallerAtInsetTime);
				}
			}else{
				numSmallerAtInsetTime += leftSubtreeSize;
				if(value > this.value)numSmallerAtInsetTime++;
				if(right == null){
					right = new SpecialBST(value, idx, numSmallerAtInsetTime);
				}else{
					right.insertHelper(value,idx,numSmallerAtInsetTime);
				}
			}
		}
			
		
	}

	
	
}
